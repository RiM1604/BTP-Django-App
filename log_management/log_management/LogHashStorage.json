{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "logHash",
          "type": "string"
        }
      ],
      "name": "LogHashStored",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "logHash",
          "type": "string"
        }
      ],
      "name": "storeLogHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "logHash",
          "type": "string"
        }
      ],
      "name": "verifyLogHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/LogHashStorage.sol"
  },
  "ast": {
    "absolutePath": "contracts/LogHashStorage.sol",
    "exportedSymbols": {
      "LogHashStorage": [
        46
      ]
    },
    "id": 47,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LogHashStorage",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 46,
        "linearizedBaseContracts": [
          46
        ],
        "name": "LogHashStorage",
        "nameLocation": "66:14:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 5,
            "mutability": "mutable",
            "name": "logHashes",
            "nameLocation": "119:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 46,
            "src": "87:41:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
              "typeString": "mapping(string => bool)"
            },
            "typeName": {
              "id": 4,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 2,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "95:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "87:23:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                "typeString": "mapping(string => bool)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 3,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "105:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "private"
          },
          {
            "anonymous": false,
            "eventSelector": "d4a95f58cf1a3ef59afb0d071d822d613c1bbb9c2c72c4f4ce37b8087cb646bf",
            "id": 9,
            "name": "LogHashStored",
            "nameLocation": "140:13:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "logHash",
                  "nameLocation": "169:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 9,
                  "src": "154:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "154:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "153:24:0"
            },
            "src": "134:44:0"
          },
          {
            "body": {
              "id": 32,
              "nodeType": "Block",
              "src": "236:140:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 18,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "254:19:0",
                        "subExpression": {
                          "baseExpression": {
                            "id": 15,
                            "name": "logHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "255:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                              "typeString": "mapping(string memory => bool)"
                            }
                          },
                          "id": 17,
                          "indexExpression": {
                            "id": 16,
                            "name": "logHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "265:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "255:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4861736820616c726561647920657869737473",
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "275:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fb6dd0c9e3a17a0105e428afb3a17de720819eba40db3b469789c307b359af08",
                          "typeString": "literal_string \"Hash already exists\""
                        },
                        "value": "Hash already exists"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fb6dd0c9e3a17a0105e428afb3a17de720819eba40db3b469789c307b359af08",
                          "typeString": "literal_string \"Hash already exists\""
                        }
                      ],
                      "id": 14,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "246:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "246:51:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "246:51:0"
                },
                {
                  "expression": {
                    "id": 26,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 22,
                        "name": "logHashes",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "307:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                          "typeString": "mapping(string memory => bool)"
                        }
                      },
                      "id": 24,
                      "indexExpression": {
                        "id": 23,
                        "name": "logHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11,
                        "src": "317:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "307:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 25,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "328:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "307:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 27,
                  "nodeType": "ExpressionStatement",
                  "src": "307:25:0"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 29,
                        "name": "logHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11,
                        "src": "361:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 28,
                      "name": "LogHashStored",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "347:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory)"
                      }
                    },
                    "id": 30,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "347:22:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 31,
                  "nodeType": "EmitStatement",
                  "src": "342:27:0"
                }
              ]
            },
            "functionSelector": "cf6e5b8b",
            "id": 33,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "storeLogHash",
            "nameLocation": "193:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "mutability": "mutable",
                  "name": "logHash",
                  "nameLocation": "220:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 33,
                  "src": "206:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 10,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "206:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "205:23:0"
            },
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "236:0:0"
            },
            "scope": 46,
            "src": "184:192:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 44,
              "nodeType": "Block",
              "src": "455:42:0",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 40,
                      "name": "logHashes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "472:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_bool_$",
                        "typeString": "mapping(string memory => bool)"
                      }
                    },
                    "id": 42,
                    "indexExpression": {
                      "id": 41,
                      "name": "logHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 35,
                      "src": "482:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "472:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 39,
                  "id": 43,
                  "nodeType": "Return",
                  "src": "465:25:0"
                }
              ]
            },
            "functionSelector": "c08f1646",
            "id": 45,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyLogHash",
            "nameLocation": "391:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "logHash",
                  "nameLocation": "419:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 45,
                  "src": "405:21:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "405:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "404:23:0"
            },
            "returnParameters": {
              "id": 39,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 38,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 45,
                  "src": "449:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 37,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "449:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "448:6:0"
            },
            "scope": 46,
            "src": "382:115:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 47,
        "src": "57:442:0",
        "usedErrors": [],
        "usedEvents": [
          9
        ]
      }
    ],
    "src": "32:467:0"
  },
  "bytecode": "6080604052348015600f57600080fd5b506102b08061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c08f16461461003b578063cf6e5b8b14610062575b600080fd5b61004e610049366004610192565b610077565b604051901515815260200160405180910390f35b610075610070366004610192565b6100a1565b005b60008082604051610088919061024b565b9081526040519081900360200190205460ff1692915050565b6000816040516100b1919061024b565b9081526040519081900360200190205460ff161561010b5760405162461bcd60e51b81526020600482015260136024820152724861736820616c72656164792065786973747360681b604482015260640160405180910390fd5b600160008260405161011d919061024b565b908152604051908190036020018120805492151560ff199093169290921790915561014990829061024b565b604051908190038120907fd4a95f58cf1a3ef59afb0d071d822d613c1bbb9c2c72c4f4ce37b8087cb646bf90600090a250565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101a457600080fd5b813567ffffffffffffffff8111156101bb57600080fd5b8201601f810184136101cc57600080fd5b803567ffffffffffffffff8111156101e6576101e661017c565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156102155761021561017c565b60405281815282820160200186101561022d57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000825160005b8181101561026c5760208186018101518583015201610252565b50600092019182525091905056fea264697066735822122065ce8e455f0dacc27e5312261492255dea64c7ddb854d82fb6f2570f7faf8b3a64736f6c634300081a0033",
  "bytecodeSha1": "7a1e78687c4fa4132f3c722bd5c482a8ecc7e736",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.26+commit.8a97fa7a"
  },
  "contractName": "LogHashStorage",
  "coverageMap": {
    "branches": {
      "0": {
        "LogHashStorage.storeLogHash": {
          "4": [
            254,
            273,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "LogHashStorage.storeLogHash": {
          "1": [
            246,
            297
          ],
          "2": [
            307,
            332
          ],
          "3": [
            342,
            369
          ]
        },
        "LogHashStorage.verifyLogHash": {
          "0": [
            465,
            490
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c8063c08f16461461003b578063cf6e5b8b14610062575b600080fd5b61004e610049366004610192565b610077565b604051901515815260200160405180910390f35b610075610070366004610192565b6100a1565b005b60008082604051610088919061024b565b9081526040519081900360200190205460ff1692915050565b6000816040516100b1919061024b565b9081526040519081900360200190205460ff161561010b5760405162461bcd60e51b81526020600482015260136024820152724861736820616c72656164792065786973747360681b604482015260640160405180910390fd5b600160008260405161011d919061024b565b908152604051908190036020018120805492151560ff199093169290921790915561014990829061024b565b604051908190038120907fd4a95f58cf1a3ef59afb0d071d822d613c1bbb9c2c72c4f4ce37b8087cb646bf90600090a250565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156101a457600080fd5b813567ffffffffffffffff8111156101bb57600080fd5b8201601f810184136101cc57600080fd5b803567ffffffffffffffff8111156101e6576101e661017c565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156102155761021561017c565b60405281815282820160200186101561022d57600080fd5b81602084016020830137600091810160200191909152949350505050565b6000825160005b8181101561026c5760208186018101518583015201610252565b50600092019182525091905056fea264697066735822122065ce8e455f0dacc27e5312261492255dea64c7ddb854d82fb6f2570f7faf8b3a64736f6c634300081a0033",
  "deployedSourceMap": "57:442:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;382:115;;;;;;:::i;:::-;;:::i;:::-;;;1261:14:1;;1254:22;1236:41;;1224:2;1209:18;382:115:0;;;;;;;184:192;;;;;;:::i;:::-;;:::i;:::-;;382:115;449:4;472:9;482:7;472:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;382:115;-1:-1:-1;;382:115:0:o;184:192::-;255:9;265:7;255:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;254:19;246:51;;;;-1:-1:-1;;;246:51:0;;1909:2:1;246:51:0;;;1891:21:1;1948:2;1928:18;;;1921:30;-1:-1:-1;;;1967:18:1;;;1960:49;2026:18;;246:51:0;;;;;;;;328:4;307:9;317:7;307:18;;;;;;:::i;:::-;;;;;;;;;;;;;;:25;;;;;-1:-1:-1;;307:25:0;;;;;;;;;;347:22;;361:7;;347:22;:::i;:::-;;;;;;;;;;;;;;;184:192;:::o;14:127:1:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:945;215:6;268:2;256:9;247:7;243:23;239:32;236:52;;;284:1;281;274:12;236:52;324:9;311:23;357:18;349:6;346:30;343:50;;;389:1;386;379:12;343:50;412:22;;465:4;457:13;;453:27;-1:-1:-1;443:55:1;;494:1;491;484:12;443:55;534:2;521:16;560:18;552:6;549:30;546:56;;;582:18;;:::i;:::-;631:2;625:9;723:2;685:17;;-1:-1:-1;;681:31:1;;;714:2;677:40;673:54;661:67;;758:18;743:34;;779:22;;;740:62;737:88;;;805:18;;:::i;:::-;841:2;834:22;865;;;906:15;;;923:2;902:24;899:37;-1:-1:-1;896:57:1;;;949:1;946;939:12;896:57;1005:6;1000:2;996;992:11;987:2;979:6;975:15;962:50;1058:1;1032:19;;;1053:2;1028:28;1021:39;;;;1036:6;146:945;-1:-1:-1;;;;146:945:1:o;1288:414::-;1419:3;1457:6;1451:13;1482:1;1492:129;1506:6;1503:1;1500:13;1492:129;;;1604:4;1588:14;;;1584:25;;1578:32;1565:11;;;1558:53;1521:12;1492:129;;;-1:-1:-1;1676:1:1;1640:16;;1665:13;;;-1:-1:-1;1640:16:1;1288:414;-1:-1:-1;1288:414:1:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    57,
    499
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC08F1646 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xCF6E5B8B EQ PUSH2 0x62 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x192 JUMP JUMPDEST PUSH2 0x77 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x75 PUSH2 0x70 CALLDATASIZE PUSH1 0x4 PUSH2 0x192 JUMP JUMPDEST PUSH2 0xA1 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x88 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x10B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x4861736820616C726561647920657869737473 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH2 0x11D SWAP2 SWAP1 PUSH2 0x24B JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD DUP2 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 0x149 SWAP1 DUP3 SWAP1 PUSH2 0x24B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0xD4A95F58CF1A3EF59AFB0D071D822D613C1BBB9C2C72C4F4CE37B8087CB646BF SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E6 JUMPI PUSH2 0x1E6 PUSH2 0x17C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x215 JUMPI PUSH2 0x215 PUSH2 0x17C JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP7 LT ISZERO PUSH2 0x22D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x252 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xCE8E455F0DAC 0xC2 PUSH31 0x5312261492255DEA64C7DDB854D82FB6F2570F7FAF8B3A64736F6C63430008 BYTE STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xC08F1646"
    },
    "38": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "EQ",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xCF6E5B8B"
    },
    "49": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62"
    },
    "53": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "DUP1",
      "path": "0"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        57,
        499
      ],
      "op": "REVERT",
      "path": "0"
    },
    "59": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "60": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4E"
    },
    "63": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49"
    },
    "66": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "67": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "69": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x192"
    },
    "72": {
      "fn": "LogHashStorage.verifyLogHash",
      "jump": "i",
      "offset": [
        382,
        497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "73": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "74": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x77"
    },
    "77": {
      "fn": "LogHashStorage.verifyLogHash",
      "jump": "i",
      "offset": [
        382,
        497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "78": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "79": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "81": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "82": {
      "op": "SWAP1"
    },
    "83": {
      "op": "ISZERO"
    },
    "84": {
      "op": "ISZERO"
    },
    "85": {
      "op": "DUP2"
    },
    "86": {
      "op": "MSTORE"
    },
    "87": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "89": {
      "op": "ADD"
    },
    "90": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "92": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "93": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "DUP1",
      "path": "0"
    },
    "94": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "95": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "SUB",
      "path": "0"
    },
    "96": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "97": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "RETURN",
      "path": "0"
    },
    "98": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "99": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x75"
    },
    "102": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x70"
    },
    "105": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "106": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "108": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x192"
    },
    "111": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "i",
      "offset": [
        184,
        376
      ],
      "op": "JUMP",
      "path": "0"
    },
    "112": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "113": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA1"
    },
    "116": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "i",
      "offset": [
        184,
        376
      ],
      "op": "JUMP",
      "path": "0"
    },
    "117": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "118": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "STOP",
      "path": "0"
    },
    "119": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "120": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        449,
        453
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "122": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        481
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 0
    },
    "123": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        482,
        489
      ],
      "op": "DUP3",
      "path": "0"
    },
    "124": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "126": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "127": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88"
    },
    "130": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "131": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "132": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24B"
    },
    "135": {
      "fn": "LogHashStorage.verifyLogHash",
      "jump": "i",
      "offset": [
        472,
        490
      ],
      "op": "JUMP",
      "path": "0"
    },
    "136": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "138": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "DUP2",
      "path": "0"
    },
    "139": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "140": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "142": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "143": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "144": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "DUP2",
      "path": "0"
    },
    "145": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "146": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SUB",
      "path": "0"
    },
    "147": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "149": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "ADD",
      "path": "0"
    },
    "150": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "151": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "152": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "153": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "155": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "AND",
      "path": "0"
    },
    "156": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        472,
        490
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "157": {
      "fn": "LogHashStorage.verifyLogHash",
      "offset": [
        382,
        497
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "158": {
      "op": "POP"
    },
    "159": {
      "op": "POP"
    },
    "160": {
      "fn": "LogHashStorage.verifyLogHash",
      "jump": "o",
      "offset": [
        382,
        497
      ],
      "op": "JUMP",
      "path": "0"
    },
    "161": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "162": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        264
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x0"
    },
    "164": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        265,
        272
      ],
      "op": "DUP2",
      "path": "0"
    },
    "165": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "167": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "168": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1"
    },
    "171": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "172": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "173": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24B"
    },
    "176": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "i",
      "offset": [
        255,
        273
      ],
      "op": "JUMP",
      "path": "0"
    },
    "177": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "178": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "179": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "DUP2",
      "path": "0"
    },
    "180": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "181": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "183": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "184": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "185": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "DUP2",
      "path": "0"
    },
    "186": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "187": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SUB",
      "path": "0"
    },
    "188": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "190": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "ADD",
      "path": "0"
    },
    "191": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "192": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "193": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "194": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "196": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        255,
        273
      ],
      "op": "AND",
      "path": "0"
    },
    "197": {
      "branch": 4,
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        254,
        273
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "198": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10B"
    },
    "201": {
      "branch": 4,
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "202": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "204": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "205": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "209": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "211": {
      "op": "SHL"
    },
    "212": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "DUP2",
      "path": "0"
    },
    "213": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "214": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "216": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "218": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "DUP3",
      "path": "0"
    },
    "219": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "ADD",
      "path": "0"
    },
    "220": {
      "op": "MSTORE"
    },
    "221": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "223": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "225": {
      "op": "DUP3"
    },
    "226": {
      "op": "ADD"
    },
    "227": {
      "op": "MSTORE"
    },
    "228": {
      "op": "PUSH19",
      "value": "0x4861736820616C726561647920657869737473"
    },
    "248": {
      "op": "PUSH1",
      "value": "0x68"
    },
    "250": {
      "op": "SHL"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "253": {
      "op": "DUP3"
    },
    "254": {
      "op": "ADD"
    },
    "255": {
      "op": "MSTORE"
    },
    "256": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "258": {
      "op": "ADD"
    },
    "259": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "261": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "262": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "DUP1",
      "path": "0"
    },
    "263": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "264": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "SUB",
      "path": "0"
    },
    "265": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "266": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "267": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        246,
        297
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "268": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        328,
        332
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x1"
    },
    "270": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        316
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "272": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        317,
        324
      ],
      "op": "DUP3",
      "path": "0"
    },
    "273": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "275": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "276": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11D"
    },
    "279": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "280": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "281": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24B"
    },
    "284": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "i",
      "offset": [
        307,
        325
      ],
      "op": "JUMP",
      "path": "0"
    },
    "285": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "286": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "287": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "DUP2",
      "path": "0"
    },
    "288": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "289": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "291": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "292": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "293": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "DUP2",
      "path": "0"
    },
    "294": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "295": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "SUB",
      "path": "0"
    },
    "296": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "298": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "ADD",
      "path": "0"
    },
    "299": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "DUP2",
      "path": "0"
    },
    "300": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        325
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "301": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "DUP1",
      "path": "0"
    },
    "302": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "303": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "304": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "305": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "306": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "308": {
      "op": "NOT"
    },
    "309": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "310": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "311": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "AND",
      "path": "0"
    },
    "312": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "313": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "314": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "315": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "OR",
      "path": "0"
    },
    "316": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "317": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "318": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        307,
        332
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "319": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 3,
      "value": "0x149"
    },
    "322": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "323": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        361,
        368
      ],
      "op": "DUP3",
      "path": "0"
    },
    "324": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        361,
        368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "325": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x24B"
    },
    "328": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "i",
      "offset": [
        347,
        369
      ],
      "op": "JUMP",
      "path": "0"
    },
    "329": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "330": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "332": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "333": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "334": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "DUP2",
      "path": "0"
    },
    "335": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "336": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SUB",
      "path": "0"
    },
    "337": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "DUP2",
      "path": "0"
    },
    "338": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "339": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "340": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0xD4A95F58CF1A3EF59AFB0D071D822D613C1BBB9C2C72C4F4CE37B8087CB646BF"
    },
    "373": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "374": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "376": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "377": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        347,
        369
      ],
      "op": "LOG2",
      "path": "0"
    },
    "378": {
      "fn": "LogHashStorage.storeLogHash",
      "offset": [
        184,
        376
      ],
      "op": "POP",
      "path": "0"
    },
    "379": {
      "fn": "LogHashStorage.storeLogHash",
      "jump": "o",
      "offset": [
        184,
        376
      ],
      "op": "JUMP",
      "path": "0"
    },
    "380": {
      "op": "JUMPDEST"
    },
    "381": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "386": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "388": {
      "op": "SHL"
    },
    "389": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "391": {
      "op": "MSTORE"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "396": {
      "op": "MSTORE"
    },
    "397": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "399": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "401": {
      "op": "REVERT"
    },
    "402": {
      "op": "JUMPDEST"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "407": {
      "op": "DUP3"
    },
    "408": {
      "op": "DUP5"
    },
    "409": {
      "op": "SUB"
    },
    "410": {
      "op": "SLT"
    },
    "411": {
      "op": "ISZERO"
    },
    "412": {
      "op": "PUSH2",
      "value": "0x1A4"
    },
    "415": {
      "op": "JUMPI"
    },
    "416": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "418": {
      "op": "DUP1"
    },
    "419": {
      "op": "REVERT"
    },
    "420": {
      "op": "JUMPDEST"
    },
    "421": {
      "op": "DUP2"
    },
    "422": {
      "op": "CALLDATALOAD"
    },
    "423": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "432": {
      "op": "DUP2"
    },
    "433": {
      "op": "GT"
    },
    "434": {
      "op": "ISZERO"
    },
    "435": {
      "op": "PUSH2",
      "value": "0x1BB"
    },
    "438": {
      "op": "JUMPI"
    },
    "439": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "441": {
      "op": "DUP1"
    },
    "442": {
      "op": "REVERT"
    },
    "443": {
      "op": "JUMPDEST"
    },
    "444": {
      "op": "DUP3"
    },
    "445": {
      "op": "ADD"
    },
    "446": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "448": {
      "op": "DUP2"
    },
    "449": {
      "op": "ADD"
    },
    "450": {
      "op": "DUP5"
    },
    "451": {
      "op": "SGT"
    },
    "452": {
      "op": "PUSH2",
      "value": "0x1CC"
    },
    "455": {
      "op": "JUMPI"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "458": {
      "op": "DUP1"
    },
    "459": {
      "op": "REVERT"
    },
    "460": {
      "op": "JUMPDEST"
    },
    "461": {
      "op": "DUP1"
    },
    "462": {
      "op": "CALLDATALOAD"
    },
    "463": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "472": {
      "op": "DUP2"
    },
    "473": {
      "op": "GT"
    },
    "474": {
      "op": "ISZERO"
    },
    "475": {
      "op": "PUSH2",
      "value": "0x1E6"
    },
    "478": {
      "op": "JUMPI"
    },
    "479": {
      "op": "PUSH2",
      "value": "0x1E6"
    },
    "482": {
      "op": "PUSH2",
      "value": "0x17C"
    },
    "485": {
      "jump": "i",
      "op": "JUMP"
    },
    "486": {
      "op": "JUMPDEST"
    },
    "487": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "489": {
      "op": "MLOAD"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "492": {
      "op": "DUP3"
    },
    "493": {
      "op": "ADD"
    },
    "494": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "496": {
      "op": "NOT"
    },
    "497": {
      "op": "SWAP1"
    },
    "498": {
      "op": "DUP2"
    },
    "499": {
      "op": "AND"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "op": "AND"
    },
    "504": {
      "op": "DUP2"
    },
    "505": {
      "op": "ADD"
    },
    "506": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "515": {
      "op": "DUP2"
    },
    "516": {
      "op": "GT"
    },
    "517": {
      "op": "DUP3"
    },
    "518": {
      "op": "DUP3"
    },
    "519": {
      "op": "LT"
    },
    "520": {
      "op": "OR"
    },
    "521": {
      "op": "ISZERO"
    },
    "522": {
      "op": "PUSH2",
      "value": "0x215"
    },
    "525": {
      "op": "JUMPI"
    },
    "526": {
      "op": "PUSH2",
      "value": "0x215"
    },
    "529": {
      "op": "PUSH2",
      "value": "0x17C"
    },
    "532": {
      "jump": "i",
      "op": "JUMP"
    },
    "533": {
      "op": "JUMPDEST"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "536": {
      "op": "MSTORE"
    },
    "537": {
      "op": "DUP2"
    },
    "538": {
      "op": "DUP2"
    },
    "539": {
      "op": "MSTORE"
    },
    "540": {
      "op": "DUP3"
    },
    "541": {
      "op": "DUP3"
    },
    "542": {
      "op": "ADD"
    },
    "543": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "545": {
      "op": "ADD"
    },
    "546": {
      "op": "DUP7"
    },
    "547": {
      "op": "LT"
    },
    "548": {
      "op": "ISZERO"
    },
    "549": {
      "op": "PUSH2",
      "value": "0x22D"
    },
    "552": {
      "op": "JUMPI"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "555": {
      "op": "DUP1"
    },
    "556": {
      "op": "REVERT"
    },
    "557": {
      "op": "JUMPDEST"
    },
    "558": {
      "op": "DUP2"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "561": {
      "op": "DUP5"
    },
    "562": {
      "op": "ADD"
    },
    "563": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "565": {
      "op": "DUP4"
    },
    "566": {
      "op": "ADD"
    },
    "567": {
      "op": "CALLDATACOPY"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "570": {
      "op": "SWAP2"
    },
    "571": {
      "op": "DUP2"
    },
    "572": {
      "op": "ADD"
    },
    "573": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "575": {
      "op": "ADD"
    },
    "576": {
      "op": "SWAP2"
    },
    "577": {
      "op": "SWAP1"
    },
    "578": {
      "op": "SWAP2"
    },
    "579": {
      "op": "MSTORE"
    },
    "580": {
      "op": "SWAP5"
    },
    "581": {
      "op": "SWAP4"
    },
    "582": {
      "op": "POP"
    },
    "583": {
      "op": "POP"
    },
    "584": {
      "op": "POP"
    },
    "585": {
      "op": "POP"
    },
    "586": {
      "jump": "o",
      "op": "JUMP"
    },
    "587": {
      "op": "JUMPDEST"
    },
    "588": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "590": {
      "op": "DUP3"
    },
    "591": {
      "op": "MLOAD"
    },
    "592": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "594": {
      "op": "JUMPDEST"
    },
    "595": {
      "op": "DUP2"
    },
    "596": {
      "op": "DUP2"
    },
    "597": {
      "op": "LT"
    },
    "598": {
      "op": "ISZERO"
    },
    "599": {
      "op": "PUSH2",
      "value": "0x26C"
    },
    "602": {
      "op": "JUMPI"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "605": {
      "op": "DUP2"
    },
    "606": {
      "op": "DUP7"
    },
    "607": {
      "op": "ADD"
    },
    "608": {
      "op": "DUP2"
    },
    "609": {
      "op": "ADD"
    },
    "610": {
      "op": "MLOAD"
    },
    "611": {
      "op": "DUP6"
    },
    "612": {
      "op": "DUP4"
    },
    "613": {
      "op": "ADD"
    },
    "614": {
      "op": "MSTORE"
    },
    "615": {
      "op": "ADD"
    },
    "616": {
      "op": "PUSH2",
      "value": "0x252"
    },
    "619": {
      "op": "JUMP"
    },
    "620": {
      "op": "JUMPDEST"
    },
    "621": {
      "op": "POP"
    },
    "622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "624": {
      "op": "SWAP3"
    },
    "625": {
      "op": "ADD"
    },
    "626": {
      "op": "SWAP2"
    },
    "627": {
      "op": "DUP3"
    },
    "628": {
      "op": "MSTORE"
    },
    "629": {
      "op": "POP"
    },
    "630": {
      "op": "SWAP2"
    },
    "631": {
      "op": "SWAP1"
    },
    "632": {
      "op": "POP"
    },
    "633": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "bd18eee2c73f6a4213fabc6078cc4fd0d81cff70",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract LogHashStorage {\n    mapping(string => bool) private logHashes;\n    event LogHashStored(string indexed logHash);\n\n    function storeLogHash(string memory logHash) public {\n        require(!logHashes[logHash], \"Hash already exists\");\n        logHashes[logHash] = true;\n        emit LogHashStored(logHash);\n    }\n\n    function verifyLogHash(string memory logHash) public view returns (bool) {\n        return logHashes[logHash];\n    }\n}",
  "sourceMap": "57:442:0:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/LogHashStorage.sol",
  "type": "contract"
}